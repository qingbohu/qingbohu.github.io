[{"title":"常见数组遍历方法","url":"/2021/05/04/数组常见操作方法/","content":"- 说明：\n1. 书写顺序按实际工作中使用的频率排序。\n2. 参数中出现 [] (中括号) 表示在为可选参数\n\n# 常见的数组遍历方法\n## 一、forEach 方法\nforEach 是最常见的数组遍历方法，使用简单功能单一。就是遍历数组的每一个元素\n### 语法\n全部参数：\n```javascript\narray.forEach(callback(current[, currentIndex, currentArray]){\n  console.log(current)\n}[, thisArg])\n```\n精简参数\n```javascript\narray.forEach(callback(current){\n  console.log(current)\n})\n```\n### 参数说明\n别看参数这么多其实实际中用到的参数并不多，这里说明下全部参数，那么精简参数你也自然清楚了。\n`forEach` 一共接收两个参数 \n\n1. `callback` 回调函数：遍历每个元素时会执行该回调函数 回调函数可以接收 3 个参数\n- `current` 当前被遍历的元素\n- `currentIndex` [可选]  当前被遍历的下标\n- `curentArray` [可选] 当前元素的数组对象\n2. `thisArg` [可选]  callback 的 this 指向\n### 实例\n```javascript\nvar array = ['张三', '李四', '王五']\narray.forEach((current, currentIndex, currentArray)=>{\n    console.log('当前被遍历的元素为：',current)\n    console.log('当前被遍历的元素下标为：',currentIndex)\n    console.log('当前被遍历的元素的数组对象：',currentArray)\n    console.log('回调函数中的this指向为：',this)\n    console.log('-----------------------------')\n},window)\n```\n--------------------------------------------------------------------------------------------------\n## 二、map 方法\nmap 方法可以用数组元素的映射，该方法不会改变源数组的值返回一个新的数组，参数和 forEach 函数是一样的。区别：因为 map 方法会返回一个全新的数组，那么在回调函数要使用 return 将当前元素返回。 \n### 语法\n全部参数：\n```javascript\narray.map(callback(current[, currentIndex, currentArray]){\n  return current + 10\n}[, thisArg])\n```\n精简参数\n```javascript\narray.map(callback(current){\n  return current + 10\n})\n```\n### 参数说明\n别看参数这么多其实实际中用到的参数并不多，这里说明下全部参数，那么精简参数你也自然清楚了。\n`map` 一共接收两个参数 \n\n1. `callback` 回调函数：遍历每个元素时会执行该回调函数 回调函数可以接收 3 个参数\n- `current` 当前被遍历的元素\n- `currentIndex` [可选]  当前被遍历的下标\n- `curentArray` [可选] 当前元素的数组对象\n2. `thisArg` [可选]  callback 的 this 指向\n### 实例\n```javascript\n// 将原来的数组每个元素 + 10 返回\nvar array = [1, 2, 3, 4]\nvar result = array.map((current)=>{\n    return current + 10\n})\nconsole.log(result) // outPut: [11, 12, 13, 14]\n```\n--------------------------------------------------------------------------------------------------\n## 三、filter 方法\nfilter 方法是对数组元素进行筛选，将符合条件的元素返回成一个数组 和 map 方法 用法差不多 偶读需要 return 它们作用不同\n### 语法\n全部参数：\n```javascript\narray.filter(callback(current[, currentIndex, currentArray]){\n  return current > 10\n}[, thisArg])\n```\n精简参数\n```javascript\narray.filter(callback(current){\n  return current > 10\n})\n```\n### 参数说明\n别看参数这么多其实实际中用到的参数并不多，这里说明下全部参数，那么精简参数你也自然清楚了。\n`filter` 一共接收两个参数 \n\n1. `callback` 回调函数：遍历每个元素时会执行该回调函数 回调函数可以接收 3 个参数\n- `current` 当前被遍历的元素\n- `currentIndex` [可选]  当前被遍历的下标\n- `curentArray` [可选] 当前元素的数组对象\n2. `thisArg` [可选]  callback 的 this 指向\n### 实例\n```javascript\nvar array = [10, 11, 22, 33, 1, 78, 60]\nvar result = array.filter((current)=>{\n    return current > 30\n})\nconsole.log(result) // outPUt: [33, 78, 60]\n```\n---------------------------------------------------------------------------------------------------------\n## 四、some 方法\nsome 方法 测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值, 有无元素符合条件 有:返回 ture 无:返回flase\n### 语法\n全部参数：\n```javascript\narray.some(callback(current[, currentIndex, currentArray]){\n  return current > 10\n}[, thisArg])\n```\n精简参数\n```javascript\narray.some(callback(current){\n  return current > 10\n})\n```\n### 参数说明\n别看参数这么多其实实际中用到的参数并不多，这里说明下全部参数，那么精简参数你也自然清楚了。\n`some` 一共接收两个参数 \n\n1. `callback` 回调函数：遍历每个元素时会执行该回调函数 回调函数可以接收 3 个参数\n- `current` 当前被遍历的元素\n- `currentIndex` [可选]  当前被遍历的下标\n- `curentArray` [可选] 当前元素的数组对象\n2. `thisArg` [可选]  callback 的 this 指向\n### 实例\n```javascript\nvar array = [10, 11, 22, 33, 1, 78, 60]\nvar result = array.some((current)=>{\n    return current > 10\n})\nconsole.log(result) // outPut: true\n```\n------------------------------------------------------------------------------------------------------\n## 五、every 方法\nevery 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。\n### 语法\n全部参数：\n```javascript\narray.every(callback(current[, currentIndex, currentArray]){\n  return current > 10\n}[, thisArg])\n```\n精简参数\n```javascript\narray.every(callback(current){\n  return current > 10\n})\n```\n### 参数说明\n别看参数这么多其实实际中用到的参数并不多，这里说明下全部参数，那么精简参数你也自然清楚了。\n`every` 一共接收两个参数 \n\n1. `callback` 回调函数：遍历每个元素时会执行该回调函数 回调函数可以接收 3 个参数\n- `current` 当前被遍历的元素\n- `currentIndex` [可选]  当前被遍历的下标\n- `curentArray` [可选] 当前元素的数组对象\n2. `thisArg` [可选]  callback 的 this 指向\n### 实例\n```javascript\nvar array = [10, 11, 22, 33, 1, 78, 60]\nvar result = array.every((current)=>{\n    return current > 10\n})\nconsole.log(result) // outPut: false\n```\n## 六、reduce 方法\nreduce 方法虽然不常见但是用起来是最爽的一个，应用场景也非常多。例如 数组去重、统计字符出现的次数、扁平化数组。一般用于本次循环结果和下次循环结果有关联的场景。\n### 语法\n全部参数：\n```javascript\narray.reduce((total, current, currentIndex, currentArray) => {\n  return current \n},init)\n\n```\n精简参数：\n```javascript\narray.reduce((total, current) => {\n  return current \n})\n```\n`reduce` 一共接收两个参数 \n1. callback 每个元素执行的回调函数\n- total 累积器\n- current 当前元素\n- currentIndex 当前元素的下标\n- currentArray 当前元素的数组对象\n2. init 第一次执行回调函数时的初始值\n### 实例\n#### 一、数组去重\n```javascript\nvar array = [1, 1, 2, 2, 5, 5, 7, 7, 10, 10]\nvar result = array.reduce((total, current) => {\n    if (!total.includes(current)){\n        total.push(current)\n    }\n    return total\n},[])\nconsole.log(result) // outPut: [1, 2, 5, 7, 10]\n```\n#### 二、统计字符出现的次数\n```javascript\nvar str = 'asdihfsahf;shagfiohsagohsfjsdhfiusgfigasd'\nvar array = str.split('')\nvar result = array.reduce((total, current)=>{\n  if (total[current]) {\n    total[current]++\n  }else{\n    total[current] = 1\n  }\n  return total\n},{})\nconsole.log(result) // outPut: {a: 5, s: 8, d: 3, i: 4, h: 6, …} \n```","tags":["基础知识","数组遍历"],"categories":["前端基础知识","数组相关操作"]},{"title":"关于我","url":"/2021/05/01/关于我/","content":"### 首先非常感谢您阅读我的文章，世界之大能让您能看到我荣幸之至。\n### 个人标签：\n男、九九后、处女座、较真、正直、强迫症\n### 爱好：\n篮球、游戏、爬山、逛大佬博客网站、听前辈讲故事、用技术解决问题\n### 个人简介\n  目前在职 Web前端开发，真的十分庆幸能在自己喜欢的工作岗位上工作。首先感谢我的爸妈，这么多年对我的培养，虽然他们知识文化不高但是却给了我很好的生活和选择的权力，其次感恩老师，在叛逆期是老师的孜孜不倦的教诲才让我没有走错路，当很多人放弃了你却还有那么一个老师对你另眼相看给了你信心。在技术路上对我提供帮助的老师，通过你们的课程让我对技术有很多认识。\n\n  关于我：我一个非常简单的人，正如一个 API 你对我的输入，我也将会输出。性格开朗活泼，对技术充满向往和好奇。路漫漫其修远兮，吾将上下而求索。\n","tags":["关于我"],"categories":["base"]}]